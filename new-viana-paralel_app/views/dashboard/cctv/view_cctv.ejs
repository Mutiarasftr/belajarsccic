<%- include('../../partials/header.ejs') %>

  <!-- Page Wrapper -->
  <div id="wrapper">

    <%- include('../../partials/dashboard/sidebar.ejs') %>

    <!-- Content Wrapper -->
    <div id="content-wrapper" class="d-flex flex-column">

      <!-- Main Content -->
      <div id="content">

        <%- include('../../partials/navbar.ejs') %>

        <!-- Begin Page Content -->
        <div class="container-fluid">
          <%- include('../../partials/message.ejs') %>
            
            <!-- Page Heading -->
            <h1 class="h3 mb-4 text-gray-800">CCTV List</h1>

            <% if(action == 'detail') { %>
              <h4 class="h4"><%= camera[0].name %></h4>
              <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                  <a class="nav-link active" id="home-tab" data-toggle="tab" href="#show-cctv-info" role="tab" aria-controls="home" aria-selected="true">CCTV Information</a>
                </li>
                <% for(let i=0; i<camera[0].eventId.length; i++){ %>
                  <li class="nav-item" role="presentation">
                    <a class="nav-link" id="profile-tab-<%= camera[0].eventId[i].analyticId.slug %>" data-toggle="tab" href="#show-cctv-analytic-<%= camera[0].eventId[i].analyticId.slug %>" role="tab" aria-controls="profile" aria-selected="false">
                      <%= camera[0].eventId[i].analyticId.name %>
                    </a>
                  </li>
                <%}%>
              </ul>
              <div class="tab-content" id="myTabContent">
                <%- include('show_cctv_information.ejs') %>
                <%- include('function.ejs') %>
                <% for(let i=0; i<camera[0].eventId.length; i++){ %>
                  <%- include('cctv-analytic/show_cctv_'+camera[0].eventId[i].analyticId.name.toLowerCase()+'.ejs', {port: camera[0].eventId[i].port, eventId: camera[0].eventId[i].id}) %>
                <%}%>
              </div>
            <% } else { %>
              <ul class="nav nav-tabs" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                  <a class="nav-link active" id="home-tab" data-toggle="tab" href="#view-cctv" role="tab" aria-controls="home" aria-selected="true">Monitoring</a>
                </li>
              </ul>
              <div class="tab-content" id="myTabContent">
                <%- include('table_cctv.ejs') %>
              </div>
            <% } %>

        </div>
        <!-- /.container-fluid -->

      </div>
      <!-- End of Main Content -->

      <%- include('../../partials/footer.ejs') %>

    </div>
    <!-- End of Content Wrapper -->

  </div>
  <!-- End of Page Wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
  <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
          <button class="close" type="button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">Ã—</span>
          </button>
        </div>
        <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
          <a class="btn btn-primary" href="login.html">Logout</a>
        </div>
      </div>
    </div>
  </div>

  <%- include('../../partials/dashboard/js.ejs') %>

  <script>
    function base64ArrayBuffer(arrayBuffer) {
      var base64    = '';
      var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      var bytes         = new Uint8Array(arrayBuffer);
      var byteLength    = bytes.byteLength;
      var byteRemainder = byteLength % 3;
      var mainLength    = byteLength - byteRemainder;

      var a, b, c, d;
      var chunk;

      // Main loop deals with bytes in chunks of 3
      for (var i = 0; i < mainLength; i = i + 3) {
        // Combine the three bytes into a single integer
        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];

        // Use bitmasks to extract 6-bit segments from the triplet
        a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18
        b = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12
        c = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6
        d = chunk & 63;               // 63       = 2^6 - 1

        // Convert the raw binary segments to the appropriate ASCII encoding
        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
      }

      // Deal with the remaining bytes and padding
      if (byteRemainder == 1) {
        chunk = bytes[mainLength];

        a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2

        // Set the 4 least significant bits to zero
        b = (chunk & 3)   << 4; // 3   = 2^2 - 1

        base64 += encodings[a] + encodings[b] + '==';
      } else if (byteRemainder == 2) {
        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];

        a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10
        b = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4

        // Set the 2 least significant bits to zero
        c = (chunk & 15)    <<  2; // 15    = 2^4 - 1

        base64 += encodings[a] + encodings[b] + encodings[c] + '=';
      }

      return base64;
    }
    
    var action = "<%= action %>";
    $(document).ready(function() {
      var page = "<%= page %>";
      var count = "<%= count %>";
      var coba = "<%= cek %>";
      var res = coba.split(",");

      if(page == 'CCTV' && action == 'view'){
        html = '';
        $.ajax({
          url: '/dashboard/cctv/process',
          type: 'GET',
          success: function(response){
            for(i=0; i<response.length; i++){
                if(i%5 == 0){
                    html += '<tr>'
                } 
                
                if(response[i].ip.substring(response[i].ip.length - 4) == 'm3u8'){
                  html += `<td>
                      <div class="card" style="width: 24rem;">
                          <video-js id=vid${i} width=382px height=286px class="vjs-default-skin" controls muted>
                            <source
                              src="${response[i].ip}"
                              type="application/x-mpegURL">
                          </video-js>
                          <div class="card-body">
                              <h5 class="card-title">${response[i].name}</h5>
                              ${response[i].eventId.map(analytic => `<li style="display:inline-block;"><span class="badge badge-primary">${analytic.analyticId.name}</span></li>`).join("")}
                              <br>
                              <a href="/dashboard/cctv/detail/${response[i]._id}" type="button" class="btn btn-primary detail">Detail</a>
                          </div>
                      </div> 
                  </td>`;
                }else{
                  html += `<td>
                      <div class="card" style="width: 24rem;">
                          <img class="card-img-top" id=rtsp${i} alt="Card image cap">
                          <div class="card-body">
                              <h5 class="card-title">${response[i].name}</h5>
                              ${response[i].eventId.map(analytic => `<li style="display:inline-block;"><span class="badge badge-primary">${analytic.analyticId.name}</span></li>`).join("")}
                              <br>
                              <a href="/dashboard/cctv/detail/${response[i]._id}" type="button" class="btn btn-primary detail">Detail</a>
                          </div>
                      </div> 
                  </td>`;
                }
    
                if((i+1)%5 == 0){
                    html += '</tr>'
                }
                
            }
            
            $('.mtable tbody').append(html);
          },
          complete: function(response){
            for(i=0; i<response.responseJSON.length; i++){
              if(response.responseJSON[i].ip.substring(response.responseJSON[i].ip.length - 4) == 'm3u8'){
                var player = videojs(`vid${i}`);
                player.play();
              }else{
                var image = document.getElementById(`rtsp${i}`);
                var divSocket = io.connect(`http://localhost:8080/cam${i}`);
                localStorage.setItem(`${response.responseJSON[i]._id}`, `cam${i}`);
                divSocket.on('data', function(data) {
                  var bytes = new Uint8Array(data);
                  image.src = 'data:image/jpeg;base64,' + base64ArrayBuffer(bytes);
                });
              }
            }
          }
        });    
      }else if (action == 'detail' && count >= 1){
        for(i=0; i<res.length; i++){
          var analytic = document.getElementById(`profile-tab-${res[i]}`).innerText;
          if(analytic == 'Face Recognition'){
            $(document).ready(function() {
                // var img = document.getElementById('img');
                var socket = io.connect('http://localhost:8090/face')
                var arr = [];
                var count = 8;

                function addZero(i) {
                  if (i < 10) {
                    i = "0" + i;
                  }
                  return i;
                }

                Date.prototype.getFormatDate = function() {
                  var monthNames = ["January", "February", "March", "April", "May", "June",
                    "July", "August", "September", "October", "November", "December"
                  ];
                  return this.getDate() + ' ' + monthNames[this.getMonth()] + ', ' + this.getFullYear();
                }

                Date.prototype.getFormatTime = function() {
                  return addZero(this.getHours()) + ':' + addZero(this.getMinutes());
                }

                socket.on('face-info', function(data){
                    var listA = document.getElementById("alarmid");
                    var res =  data.images;
                    var time = new Date(data.date);
                    var clas = data.class;
                    var name = data.name;
                    var camera = data.camera_name;
                    count++;

                    if(count > 8){
                      listA.removeChild(listA.lastChild); 
                    }

                    $('#hcol ol').prepend(
                      `<li style="list-style-type: none; float: left;">
                          <div class="row">
                              <div class="col mr-2">
                                  <img class="mb-2 zoom" src="/images/face-recognition-data/${res}" width="50" height="50"/>
                                  <p class="class_data" style="margin: auto; font-size: 12px;">${clas}</p>
                                  <p style="margin: auto">${name}</p>
                                  <p style="margin: auto; font-size: 12px;">${time.getFormatDate()}</p>
                                  <p style="margin: auto; font-size: 12px;">${time.getFormatTime()}</p>
                                  <p style="margin: auto; font-size: 11px;">${camera}</p>
                              </div>
                          </div>
                      </li>`
                    );

                });
            });
          }else if(analytic == 'Object Detection'){
            $(document).ready(function() {
              var data;
              var myChart;
              var context;
              var jumlah = 0;

              
              var data = {
                  labels: [],
                  datasets: [{
                      data: [],
                      label: 'Object Detection',
                      backgroundColor: [
                          'rgba(46, 204, 113,1.0)',
                          'rgba(52, 152, 219,1.0)',
                          'rgba(155, 89, 182,1.0)',
                          'rgba(52, 73, 94,1.0)',
                          'rgba(26, 188, 156,1.0)',
                          'rgba(241, 196, 15,1.0)',
                          'rgba(230, 126, 34,1.0)',
                          'rgba(231, 76, 60,1.0)',
                          'rgba(149, 165, 166,1.0)'
                      ],
                  }]
              }
  
              var socket = io.connect('http://localhost:8090/object');
  
              context = document.getElementById('objectChart').getContext('2d');
              myChart = new Chart(context,{
                type: 'bar',
                data: data,
                animation:{ 
                    animateScale:true
                }
              });
  
              function proses(response){
                for (var i=0; i<response.data.length; i++) {
                  jumlah = jumlah + Number(response.data[i].count);
                  data.labels[i] = response.data[i].object;
                  data.datasets[0].data[i] = response.data[i].count;
                }
                //data.labels.splice(0, 1);
                //data.datasets[0].data.splice(0, 1);
                //console.log(data.labels);
              }
  
              function clear(){
                data.labels.length = 0;
                data.datasets[0].data.length = 0;
                jumlah=0;
              }
  
              function display(response){
                clear();
                proses(response);
                myChart.update();
                document.getElementById('jml_obj').innerHTML = jumlah;
              }
  
              socket.on('object', function (response) {
                display(response);
                console.log(response);
              });
            });
          }else if(analytic == 'Cumulative Counting'){
            $(document).ready(function(){
              var cumulative_obj = '<%- JSON.stringify(data_event_cum); %>';
              var cumulative_obj = JSON.parse(cumulative_obj);
              var jumlah = 0;

              var socket = io.connect('http://localhost:8090/counting')

              var canvas = document.getElementById('myChart');
              var ctx = canvas.getContext('2d');
              
              var data = {
                labels: [],
                datasets: [{
                    data: [],
                    label: 'Object',
                    backgroundColor: [
                        'rgba(46, 204, 113,1.0)',
                        'rgba(52, 152, 219,1.0)',
                        'rgba(155, 89, 182,1.0)',
                        'rgba(52, 73, 94,1.0)',
                        'rgba(26, 188, 156,1.0)',
                        'rgba(241, 196, 15,1.0)',
                        'rgba(230, 126, 34,1.0)',
                        'rgba(231, 76, 60,1.0)',
                        'rgba(149, 165, 166,1.0)'
                    ],
                }]
              }

              function proses(response){
                for (var i=0; i<response.length; i++) {
                  jumlah = jumlah + response[i].value;
                  data.labels[i] = response[i]._id;
                  data.datasets[0].data[i] = response[i].value;
                }
                // console.log(data);
              }

              proses(cumulative_obj);

              document.getElementById('jumlah').innerHTML = jumlah;
              
              var myChart = new Chart(ctx,{
                type: 'bar',
                data: data,
                animation:{ 
                  animateScale:true
                }
              });

              function clear(){
                data.labels.length = 0;
                data.datasets[0].data.length = 0;
                jumlah=0;
              }

              function display(response){
                clear();
                proses(response);
                myChart.update();
                document.getElementById('jumlah').innerHTML = jumlah;
              }

              socket.on('count', function (response) {
                display(response);
              });

            });
          }else if(analytic == 'Social Distancing'){
            $(document).ready(function(){
              var covid_obj = '<%- JSON.stringify(data_event_covid); %>';
              var covid_obj = JSON.parse(covid_obj);

              var socket = io.connect('http://localhost:8090/covid')

              var data;
              var myChart;
              var context;
              
              var data = {
                labels: [],
                datasets: [{
                    data: [],
                    label: 'Social Distancing',
                    backgroundColor: [
                        'rgba(46, 204, 113,1.0)',
                        'rgba(52, 152, 219,1.0)',
                        'rgba(155, 89, 182,1.0)',
                        'rgba(52, 73, 94,1.0)',
                        'rgba(26, 188, 156,1.0)',
                        'rgba(241, 196, 15,1.0)',
                        'rgba(230, 126, 34,1.0)',
                        'rgba(231, 76, 60,1.0)',
                        'rgba(149, 165, 166,1.0)'
                    ],
                }]
              }
      
      
              context = document.getElementById('covidChart').getContext('2d');
      
              function proses(response){
                for (var i=0; i<4; i++) {
                  data.labels[i] = response.label[i];
                  data.datasets[0].data[i] = response.value[i];
                }
              }

              newobj = {
                'size': Object.keys(covid_obj[0].covid).length,
                'label': Object.keys(covid_obj[0].covid),
                'value': Object.values(covid_obj[0].covid),
              };
              
              proses(newobj);

              myChart = new Chart(context,{
                type: 'bar',
                data: data,
                animation:{ 
                  animateScale:true
                }
              });

              function clear(){
                data.labels.length = 0;
                data.datasets[0].data.length = 0;
                jumlah=0;
              }

              function display(response){
                clear();
                proses(response);
                myChart.update();
                document.getElementById('jml').innerHTML = response.value[0];
                document.getElementById('jml_low').innerHTML = response.value[1];
                document.getElementById('jml_high').innerHTML = response.value[2];
                document.getElementById('jml_save').innerHTML = response.value[3];
              }

              socket.on('covid', function (response) {
                newobj = {
                  'size': Object.keys(response[0].covid).length,
                  'label': Object.keys(response[0].covid),
                  'value': Object.values(response[0].covid),
                };
                display(newobj);
                //console.log(newobj);
              });
              
            });
          }
        }
      }
    });

    $(document).ready(function(){
      if(action == 'detail'){
        const queryString = window.location.pathname;
        const key = queryString.split('/')[4];
        var img_info = document.getElementById("rtsp");
        var cam = localStorage.getItem(key);
        var divSocket = io.connect(`http://localhost:8080/${cam}`);
        divSocket.on('data', function(data) {
          var bytes = new Uint8Array(data);
          img_info.src = 'data:image/jpeg;base64,' + base64ArrayBuffer(bytes);
        });
      }
    })
</script>
